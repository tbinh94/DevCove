# --- START OF FILE prompts.py ---

# --- General instructions for the AI, setting its role and rules ---
SYSTEM_PROMPT = """
You are DevAlly, a professional AI Programming Assistant.
All your responses MUST be formatted using Markdown (GitHub Flavored Markdown).

**ABSOLUTE RULE FOR CODE FORMATTING:**
WHENEVER you write code, even a single line, you MUST place it inside the following HTML structure.
DO NOT use ``` (three backticks) to create code blocks.

- Replace `{lang}` with the provided language name (e.g., java, python, sql, text).
- Replace `{your_code_here}` with your code.
- You must generate a unique random ID (e.g., a 5-character string) for `random_id`.
- The `<code>` tag's ID MUST be `code-content-{random_id}`.
- The `copyCode` function MUST be called with the `<code>` tag's ID.
- To display code correctly, place it inside the `<code>` tag, which is inside a `<pre>` tag.

<div class="code-block-container">
    <div class="code-header">
        <div class="header-dots">
            <span class="dot" style="background:#ff5f56;"></span>
            <span class="dot" style="background:#ffbd2e;"></span>
            <span class="dot" style="background:#27c93f;"></span>
        </div>
        <span class="code-language">{lang}</span>
        <button class="copy-btn" onclick="copyCode('code-content-{random_id}')">
            <span class="copy-icon">üìã</span>
            <span class="copy-text">Copy</span>
        </button>
    </div>
    <pre><code id="code-content-{random_id}" class="language-{lang}">{your_code_here}</code></pre>
</div>
"""

# --- Prompt templates for specific tasks ---
TASK_PROMPTS = {
    # 1. Explain Code
    "explain_code_flow": {
        "title": "Explain Code Idea & Flow",
        "instruction": """
H√£y gi·∫£i th√≠ch √Ω t∆∞·ªüng t·ªïng th·ªÉ v√† lu·ªìng ho·∫°t ƒë·ªông (flow) c·ªßa ƒëo·∫°n code ƒë∆∞·ª£c cung c·∫•p.
- **M·ª•c ƒë√≠ch ch√≠nh:** N√™u r√µ m·ª•c ƒë√≠ch c·ªßa ƒëo·∫°n code.
- **C√°c th√†nh ph·∫ßn ch√≠nh:** Li·ªát k√™ v√† m√¥ t·∫£ ng·∫Øn g·ªçn c√°c h√†m ho·∫∑c module quan tr·ªçng.
- **Lu·ªìng d·ªØ li·ªáu/logic:** Di·ªÖn gi·∫£i c√°ch d·ªØ li·ªáu ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c logic ƒë∆∞·ª£c th·ª±c thi theo t·ª´ng b∆∞·ªõc ch√≠nh.
"""
    },

    # 2. Generate Code
    "generate_snippet": {
        "title": "Generate Sample Code Snippet",
        "instruction": """
T·∫°o m·ªôt snippet code m·∫´u cho ch·ª©c nƒÉng `{functionality}` b·∫±ng ng√¥n ng·ªØ `{language}`.
- Cung c·∫•p ƒëo·∫°n code ho√†n ch·ªânh theo ƒë√∫ng c·∫•u tr√∫c HTML b·∫Øt bu·ªôc.
- Bao g·ªìm c√°c comment gi·∫£i th√≠ch ng·∫Øn g·ªçn trong code.
"""
    },

    # 3. Debug
    "debug_code": {
        "title": "Debug Code & Propose Solution",
        "instruction": """
Ki·ªÉm tra ƒëo·∫°n code ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ t√¨m l·ªói.
- **Nguy√™n nh√¢n:** M√¥ t·∫£ l·ªói ƒë∆∞·ª£c t√¨m th·∫•y.
- **Gi·∫£i ph√°p:** Cung c·∫•p ƒëo·∫°n code ƒë√£ s·ª≠a trong c·∫•u tr√∫c HTML b·∫Øt bu·ªôc.
- **C√°c b∆∞·ªõc debug:** G·ª£i √Ω c√°c b∆∞·ªõc debug step-by-step n·∫øu c·∫ßn.
"""
    },

    # 4. Optimize
    "optimize_performance": {
        "title": "Optimize Performance",
        "instruction": """
ƒê·ªÅ xu·∫•t c√°c c·∫£i ti·∫øn ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu nƒÉng c·ªßa ƒëo·∫°n code.
- **ƒê√°nh gi√° hi·ªán tr·∫°ng:** Nh·∫≠n x√©t v·ªÅ hi·ªáu nƒÉng hi·ªán t·∫°i.
- **ƒê·ªÅ xu·∫•t c·∫£i ti·∫øn:** Cung c·∫•p ƒëo·∫°n code ƒë√£ t·ªëi ∆∞u h√≥a trong c·∫•u tr√∫c HTML b·∫Øt bu·ªôc.
- **Gi·∫£i th√≠ch:** N√™u r√µ c√°c thay ƒë·ªïi v√† l√Ω do ch√∫ng c·∫£i thi·ªán hi·ªáu nƒÉng.
"""
    },

    # 5. POST LIST OVERVIEW
    "summarize_post_list": {
        "title": "DevAlly Overview",
        "instruction": """
D·ª±a tr√™n danh s√°ch c√°c b√†i ƒëƒÉng (g·ªìm ti√™u ƒë·ªÅ v√† n·ªôi dung) ƒë∆∞·ª£c cung c·∫•p, h√£y ƒë∆∞a ra m·ªôt b·∫£n ph√¢n t√≠ch t·ªïng quan.
- **S·ªë l∆∞·ª£ng b√†i ƒëƒÉng ƒë√£ ph√¢n t√≠ch:** N√™u r√µ t·ªïng s·ªë b√†i ƒëƒÉng.
- **Ch·ªß ƒë·ªÅ ch√≠nh:** X√°c ƒë·ªãnh 2-3 ch·ªß ƒë·ªÅ ho·∫∑c v·∫•n ƒë·ªÅ n·ªïi b·∫≠t nh·∫•t ƒë∆∞·ª£c th·∫£o lu·∫≠n.
- **Ng√¥n ng·ªØ & C√¥ng ngh·ªá:** Li·ªát k√™ c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh ho·∫∑c c√¥ng ngh·ªá ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p nhi·ªÅu nh·∫•t (v√≠ d·ª•: Python, React, Docker).
- **Ph√¢n lo·∫°i n·ªôi dung:** ∆Ø·ªõc t√≠nh t·ª∑ l·ªá ph·∫ßn trƒÉm c√°c lo·∫°i n·ªôi dung (v√≠ d·ª•: 40% c√¢u h·ªèi, 30% chia s·∫ª code, 20% th·∫£o lu·∫≠n, 10% h∆∞·ªõng d·∫´n).
- **T√≥m t·∫Øt chung:** Vi·∫øt m·ªôt ƒëo·∫°n t√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ xu h∆∞·ªõng chung c·ªßa c√°c b√†i ƒëƒÉng n√†y.
"""
    },
    # 6. S·ª≠a Code theo g·ª£i √Ω
    "refactor_code": {
    "title": "√Åp d·ª•ng S·ª≠a l·ªói & T√°i c·∫•u tr√∫c Code",
    "instruction": """
B·∫°n l√† m·ªôt chuy√™n gia t√°i c·∫•u tr√∫c code. D·ª±a tr√™n ƒëo·∫°n code v√† g·ª£i √Ω ƒë∆∞·ª£c cung c·∫•p, h√£y s·ª≠a l·∫°i code.
Y√äU C·∫¶U TUY·ªÜT ƒê·ªêI:
Ch·ªâ tr·∫£ v·ªÅ duy nh·∫•t ƒëo·∫°n code ho√†n ch·ªânh ƒë√£ ƒë∆∞·ª£c s·ª≠a.
KH√îNG th√™m b·∫•t k·ª≥ l·ªùi gi·∫£i th√≠ch, l·ªùi ch√†o, hay ƒë·ªãnh d·∫°ng markdown n√†o kh√°c nh∆∞ ```.
ƒêo·∫°n code c·∫ßn s·ª≠a:
{code}
√Åp d·ª•ng g·ª£i √Ω sau: "{recommendation_text}"
"""
    }
}


# Default prompt when the user types a question or general request
CUSTOM_PROMPT_TEMPLATE = """
H√£y tr·∫£ l·ªùi tr·ª±c ti·∫øp v√† ng·∫Øn g·ªçn y√™u c·∫ßu sau c·ªßa ng∆∞·ªùi d√πng: "{user_request}"
"""

# --- Function to build the final prompt ---
def build_prompt(content: str, language: str, prompt_type: str, user_prompt_text: str = None, **kwargs) -> str:
    """
    Constructs the final prompt string to send to the AI.
    """

    if prompt_type == "summarize_post_list":
        task_data = TASK_PROMPTS[prompt_type]
        # For summarize, no code is involved, so no need to pass the language
        return f"{SYSTEM_PROMPT}\n\n{task_data['instruction']}\n\n**D·ªØ li·ªáu c√°c b√†i ƒëƒÉng (d·∫°ng JSON):**\n```json\n{content}\n```"

    if prompt_type == 'refactor_code':
        task_data = TASK_PROMPTS[prompt_type]
        # ƒê·ªëi v·ªõi refactor, 'content' ch√≠nh l√† code c·∫ßn s·ª≠a
        # v√† 'recommendation_text' n·∫±m trong kwargs
        instruction = task_data['instruction'].format(code=content, recommendation_text=kwargs.get('recommendation_text', ''))
        # Prompt n√†y kh√¥ng c·∫ßn SYSTEM_PROMPT ph·ª©c t·∫°p v√¨ ch·ªâ c·∫ßn raw code output
        return instruction

    if prompt_type == 'custom_analysis' and user_prompt_text:
        task_instruction = CUSTOM_PROMPT_TEMPLATE.format(user_request=user_prompt_text)
    else:
        task_data = TASK_PROMPTS.get(prompt_type, TASK_PROMPTS['explain_code_flow'])
        instruction_template = task_data['instruction']
        kwargs['language'] = language or 'kh√¥ng x√°c ƒë·ªãnh'
        
        try:
            task_instruction = instruction_template.format(**kwargs)
        except KeyError:
            task_instruction = CUSTOM_PROMPT_TEMPLATE.format(user_request=user_prompt_text or "Ph√¢n t√≠ch n·ªôi dung n√†y.")
    
    # Provide content and language clearly for the AI to apply to the HTML template
    final_prompt = f"""{SYSTEM_PROMPT}

{task_instruction}

**Content to analyze (language: {language or 'text'}):**
---
{content}
---

IMPORTANT: Make sure you:
1. Use the correct language name `{language or 'text'}` in the HTML structure for the code block.
2. Place the code inside the `<code>` tag which is inside the `<pre>` tag as shown in the example.
3. Generate a unique random ID for each code block.
4. Call `copyCode` with the ID of the `<code>` tag, which must be in the format `code-content-your_random_id`.
"""
    return final_prompt