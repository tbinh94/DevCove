# --- H∆∞·ªõng d·∫´n chung cho AI, ƒë·∫∑t vai tr√≤ v√† quy t·∫Øc ---
SYSTEM_PROMPT = """
B·∫°n l√† DevAlly, m·ªôt Tr·ª£ l√Ω AI l·∫≠p tr√¨nh chuy√™n nghi·ªáp.
B·∫°n c√≥ kh·∫£ nƒÉng gi·∫£i th√≠ch, h∆∞·ªõng d·∫´n, t·∫°o code, s·ª≠a l·ªói, t·ªëi ∆∞u h√≥a, vi·∫øt test, t·∫°o t√†i li·ªáu, chuy·ªÉn ƒë·ªïi ng√¥n ng·ªØ, ki·ªÉm tra b·∫£o m·∫≠t v√† t∆∞ v·∫•n CI/CD.
M·ªçi ph·∫£n h·ªìi c·ªßa b·∫°n PH·∫¢I ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng b·∫±ng Markdown (Github Flavored Markdown).
H√£y tr√¨nh b√†y th√¥ng tin m·ªôt c√°ch r√µ r√†ng, ng·∫Øn g·ªçn v√† tr·ª±c ti·∫øp.
Lu√¥n t·∫≠p trung v√†o y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.
"""

# --- C√°c m·∫´u prompt cho t·ª´ng nhi·ªám v·ª• c·ª• th·ªÉ ---
# M·ªói prompt ƒë·ªÅu y√™u c·∫ßu AI tr·∫£ l·ªùi theo m·ªôt c·∫•u tr√∫c Markdown c·ª• th·ªÉ
TASK_PROMPTS = {
    # 1. Gi·∫£i th√≠ch Code
    "explain_code_flow": {
        "title": "üí° Gi·∫£i th√≠ch √Ω t∆∞·ªüng & Lu·ªìng ch·∫°y c·ªßa Code",
        "instruction": """
## {title}
H√£y gi·∫£i th√≠ch √Ω t∆∞·ªüng t·ªïng th·ªÉ v√† lu·ªìng ho·∫°t ƒë·ªông (flow) c·ªßa ƒëo·∫°n code ƒë∆∞·ª£c cung c·∫•p.
- **M·ª•c ƒë√≠ch ch√≠nh:** N√™u r√µ m·ª•c ƒë√≠ch c·ªßa ƒëo·∫°n code.
- **C√°c th√†nh ph·∫ßn ch√≠nh:** Li·ªát k√™ v√† m√¥ t·∫£ ng·∫Øn g·ªçn c√°c h√†m ho·∫∑c module quan tr·ªçng.
- **Lu·ªìng d·ªØ li·ªáu/logic:** Di·ªÖn gi·∫£i c√°ch d·ªØ li·ªáu ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c logic ƒë∆∞·ª£c th·ª±c thi theo t·ª´ng b∆∞·ªõc ch√≠nh.
"""
    },

    # 2. T·∫°o Code
    "generate_snippet": {
        "title": "üìù T·∫°o Snippet Code M·∫´u",
        "instruction": """
## {title}
T·∫°o m·ªôt snippet code m·∫´u cho ch·ª©c nƒÉng `{functionality}` b·∫±ng ng√¥n ng·ªØ {language}.
- Cung c·∫•p ƒëo·∫°n code ho√†n ch·ªânh trong m·ªôt kh·ªëi code.
- Bao g·ªìm c√°c comment gi·∫£i th√≠ch ng·∫Øn g·ªçn trong code.
- ƒê·∫£m b·∫£o code ho·∫°t ƒë·ªông v√† tu√¢n th·ªß c√°c best practices c∆° b·∫£n.
"""
    },

    # 3. S·ª≠a l·ªói
    "debug_code": {
        "title": "üõ†Ô∏è Debug Code & ƒê·ªÅ xu·∫•t Gi·∫£i ph√°p",
        "instruction": """
## {title}
Ki·ªÉm tra ƒëo·∫°n code ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ t√¨m l·ªói.
- **Nguy√™n nh√¢n:** M√¥ t·∫£ l·ªói ƒë∆∞·ª£c t√¨m th·∫•y.
- **Gi·∫£i ph√°p:** Cung c·∫•p ƒëo·∫°n code ƒë√£ s·ª≠a trong m·ªôt kh·ªëi code.
- **C√°c b∆∞·ªõc debug:** G·ª£i √Ω c√°c b∆∞·ªõc debug step-by-step n·∫øu c·∫ßn.
"""
    },

    # 4. T·ªëi ∆∞u h√≥a
    "optimize_performance": {
        "title": "‚ö° T·ªëi ∆∞u h√≥a Hi·ªáu nƒÉng",
        "instruction": """
## {title}
ƒê·ªÅ xu·∫•t c√°c c·∫£i ti·∫øn ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu nƒÉng c·ªßa ƒëo·∫°n code.
- **ƒê√°nh gi√° hi·ªán tr·∫°ng:** Nh·∫≠n x√©t v·ªÅ hi·ªáu nƒÉng hi·ªán t·∫°i.
- **ƒê·ªÅ xu·∫•t c·∫£i ti·∫øn:** Cung c·∫•p ƒëo·∫°n code ƒë√£ t·ªëi ∆∞u h√≥a trong m·ªôt kh·ªëi code.
- **Gi·∫£i th√≠ch:** N√™u r√µ c√°c thay ƒë·ªïi v√† l√Ω do ch√∫ng c·∫£i thi·ªán hi·ªáu nƒÉng.
"""
    },

    # 5. *** NEW PROMPT FOR POST LIST OVERVIEW ***
    "summarize_post_list": {
        "title": "üìä T·ªïng quan danh s√°ch b√†i ƒëƒÉng",
        "instruction": """
## {title}
D·ª±a tr√™n danh s√°ch c√°c b√†i ƒëƒÉng (g·ªìm ti√™u ƒë·ªÅ v√† n·ªôi dung) ƒë∆∞·ª£c cung c·∫•p, h√£y ƒë∆∞a ra m·ªôt b·∫£n ph√¢n t√≠ch t·ªïng quan.
- **S·ªë l∆∞·ª£ng b√†i ƒëƒÉng ƒë√£ ph√¢n t√≠ch:** N√™u r√µ t·ªïng s·ªë b√†i ƒëƒÉng.
- **Ch·ªß ƒë·ªÅ ch√≠nh:** X√°c ƒë·ªãnh 2-3 ch·ªß ƒë·ªÅ ho·∫∑c v·∫•n ƒë·ªÅ n·ªïi b·∫≠t nh·∫•t ƒë∆∞·ª£c th·∫£o lu·∫≠n.
- **Ng√¥n ng·ªØ & C√¥ng ngh·ªá:** Li·ªát k√™ c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh ho·∫∑c c√¥ng ngh·ªá ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p nhi·ªÅu nh·∫•t (v√≠ d·ª•: Python, React, Docker).
- **Ph√¢n lo·∫°i n·ªôi dung:** ∆Ø·ªõc t√≠nh t·ª∑ l·ªá ph·∫ßn trƒÉm c√°c lo·∫°i n·ªôi dung (v√≠ d·ª•: 40% c√¢u h·ªèi, 30% chia s·∫ª code, 20% th·∫£o lu·∫≠n, 10% h∆∞·ªõng d·∫´n).
- **T√≥m t·∫Øt chung:** Vi·∫øt m·ªôt ƒëo·∫°n t√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ xu h∆∞·ªõng chung c·ªßa c√°c b√†i ƒëƒÉng n√†y.
"""
    }
}

# Prompt m·∫∑c ƒë·ªãnh khi ng∆∞·ªùi d√πng t·ª± g√µ c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu chung chung
CUSTOM_PROMPT_TEMPLATE = """
## ‚ùì Y√™u c·∫ßu t√πy ch·ªânh
H√£y tr·∫£ l·ªùi tr·ª±c ti·∫øp v√† ng·∫Øn g·ªçn y√™u c·∫ßu sau c·ªßa ng∆∞·ªùi d√πng: "{user_request}"
"""

# --- H√†m x√¢y d·ª±ng prompt cu·ªëi c√πng ---
def build_prompt(content: str, language: str, prompt_type: str, user_prompt_text: str = None, **kwargs) -> str:
    """
    X√¢y d·ª±ng chu·ªói prompt cu·ªëi c√πng ƒë·ªÉ g·ª≠i ƒë·∫øn AI.

    :param content: N·ªôi dung code ho·∫∑c log ƒë·ªÉ ph√¢n t√≠ch.
    :param language: Ng√¥n ng·ªØ l·∫≠p tr√¨nh c·ªßa content (v√≠ d·ª•: 'python', 'javascript', 'php').
    :param prompt_type: Lo·∫°i t√°c v·ª• mong mu·ªën (v√≠ d·ª•: 'explain_code_flow', 'generate_snippet').
    :param user_prompt_text: VƒÉn b·∫£n y√™u c·∫ßu t√πy ch·ªânh c·ªßa ng∆∞·ªùi d√πng (n·∫øu c√≥).
    :param kwargs: C√°c tham s·ªë b·ªï sung t√πy thu·ªôc v√†o prompt_type.
    :return: Chu·ªói prompt ho√†n ch·ªânh.
    """
    
    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p custom analysis
    if prompt_type == 'custom_analysis' and user_prompt_text:
        task_instruction = CUSTOM_PROMPT_TEMPLATE.format(user_request=user_prompt_text)
    else:
        # L·∫•y task data t·ª´ TASK_PROMPTS
        task_data = TASK_PROMPTS.get(prompt_type)
        if not task_data:
            # Fallback v·ªÅ explain_code_flow n·∫øu prompt_type kh√¥ng h·ª£p l·ªá
            task_data = TASK_PROMPTS['explain_code_flow']
        
        # Format instruction v·ªõi c√°c parameters c·ª• th·ªÉ
        instruction_template = task_data['instruction']
        title = task_data['title']
        
        # Th√™m language v√†o kwargs ƒë·ªÉ format
        kwargs['language'] = language
        
        try:
            # Format instruction v·ªõi title v√† kwargs
            formatted_instruction = instruction_template.format(title=title, **kwargs)
            task_instruction = formatted_instruction
        except KeyError as e:
            # N·∫øu thi·∫øu parameter, s·ª≠ d·ª•ng fallback
            task_instruction = CUSTOM_PROMPT_TEMPLATE.format(user_request=user_prompt_text or "Ph√¢n t√≠ch code n√†y")

    # X√¢y d·ª±ng prompt cu·ªëi c√πng
    final_prompt = f"""{SYSTEM_PROMPT}

**N·ªôi dung ƒë·ªÉ ph√¢n t√≠ch ({language}):**
```text
{content}
{task_instruction}
"""
    return final_prompt
