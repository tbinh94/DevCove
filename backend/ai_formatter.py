# ai_formatter.py - Enhanced version with HTML formatting and copy functionality

import re
import uuid
from django.utils import timezone
from typing import Optional, List, Tuple, Dict

class AICommentFormatter:
    """Enhanced AI comment formatter with HTML output and copy functionality"""
    
    def __init__(self):
        self.issue_counter = 0
        self.solution_counter = 0
    
    def format_full_response(self, ai_text: str, post) -> str:
        """Main method to format complete AI response as HTML"""
        header = self._create_header(post)
        formatted_content = self._enhance_content_formatting(ai_text)
        footer = self._create_footer()
        css_styles = self._get_css_styles()
        copy_script = self._get_copy_script()
        
        return f"""
        <div class="ai-analysis-report">
            <style>{css_styles}</style>
            {header}
            {formatted_content}
            {footer}
            <script>{copy_script}</script>
        </div>
        """
    
    def _create_header(self, post) -> str:
        """Create enhanced header with HTML formatting"""
        generated_time = timezone.now().strftime('%Y-%m-%d at %H:%M UTC')
        return f"""
        <div class="ai-header">
            <div class="ai-title">
                <span class="ai-icon">ü§ñ</span>
                <h1>AI CODE ANALYSIS REPORT</h1>
            </div>
            <div class="ai-meta">
                <span class="post-id">Post #{post.id}</span>
                <span class="separator">‚Ä¢</span>
                <span class="generated-time">Generated: {generated_time}</span>
                <span class="separator">‚Ä¢</span>
                <span class="engine">Analysis Engine: Gemini 2.5 Flash</span>
            </div>
        </div>
        <div class="divider"></div>
        """

    def _create_footer(self) -> str:
        """Create enhanced footer with HTML"""
        return f"""
        <div class="divider"></div>
        <div class="ai-disclaimer">
            <div class="disclaimer-header">
                <span class="warning-icon">‚ö†Ô∏è</span>
                <span class="disclaimer-title">DISCLAIMER</span>
            </div>
            <div class="disclaimer-content">
                <p>This analysis was generated by AI - please review carefully:</p>
                <ul>
                    <li>Test all code changes thoroughly before production</li>
                    <li>Get human review for critical production code</li>
                    <li>Consider your specific requirements and constraints</li>
                </ul>
            </div>
        </div>
        """

    def _enhance_content_formatting(self, text: str) -> str:
        """Enhanced content formatting with HTML structure"""
        self.issue_counter = 0
        self.solution_counter = 0
        
        # Clean markdown symbols first
        text = self._clean_markdown_symbols(text)
        
        # Process sections
        formatted_text = self._format_sections(text)
        formatted_text = self._format_issues_and_solutions(formatted_text)
        formatted_text = self._format_code_blocks(formatted_text)
        formatted_text = self._enhance_typography(formatted_text)
        
        return formatted_text

    def _clean_markdown_symbols(self, text: str) -> str:
        """Remove markdown symbols and replace with HTML"""
        # Remove ** for bold (we'll handle this in HTML)
        text = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', text)
        
        # Remove ## for headers (we'll handle this in sections)
        text = re.sub(r'^#{1,6}\s*', '', text, flags=re.MULTILINE)
        
        # Remove markdown list indicators
        text = re.sub(r'^\s*[-*+]\s*', '', text, flags=re.MULTILINE)
        
        # Clean up extra spaces
        text = re.sub(r'\s+', ' ', text)
        
        return text

    def _format_sections(self, text: str) -> str:
        """Format main sections with HTML structure"""
        sections = {
            r'üéØ\s*OVERALL ASSESSMENT': self._create_section_html('üéØ', 'OVERALL ASSESSMENT', 'assessment'),
            r'‚úÖ\s*WHAT[\'"]?S WORKING WELL': self._create_section_html('‚úÖ', 'WHAT\'S WORKING WELL', 'positive'),
            r'üö®\s*CRITICAL ISSUES': self._create_section_html('üö®', 'CRITICAL ISSUES (HIGH PRIORITY)', 'critical'),
            r'‚ö†Ô∏è\s*IMPORTANT IMPROVEMENTS': self._create_section_html('‚ö†Ô∏è', 'IMPORTANT IMPROVEMENTS (MEDIUM PRIORITY)', 'warning'),
            r'üí°\s*ENHANCEMENT SUGGESTIONS': self._create_section_html('üí°', 'ENHANCEMENT SUGGESTIONS (LOW PRIORITY)', 'suggestion'),
            r'üîß\s*STEP-BY-STEP FIX GUIDE': self._create_section_html('üîß', 'STEP-BY-STEP FIX GUIDE', 'guide'),
            r'üìã\s*QUICK CHECKLIST': self._create_section_html('üìã', 'QUICK CHECKLIST', 'checklist'),
            r'üìö\s*RECOMMENDED RESOURCES': self._create_section_html('üìö', 'RECOMMENDED RESOURCES', 'resources')
        }
        
        for pattern, replacement in sections.items():
            text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
        
        return text

    def _create_section_html(self, emoji: str, title: str, css_class: str) -> str:
        """Create styled section header with HTML"""
        return f"""
        <div class="section-header {css_class}">
            <span class="section-emoji">{emoji}</span>
            <h2 class="section-title">{title}</h2>
        </div>
        <div class="section-content">
        """

    def _format_issues_and_solutions(self, text: str) -> str:
        """Format issues and solutions with HTML structure"""
        # Pattern to match PROBLEM blocks
        issue_pattern = r'PROBLEM:\s*(.*?)(?=PROBLEM:|SOLUTION:|$)'
        solution_pattern = r'SOLUTION:\s*(.*?)(?=PROBLEM:|SOLUTION:|$)'
        
        def format_issue(match) -> str:
            self.issue_counter += 1
            issue_content = match.group(1).strip()
            return f"""
            <div class="issue-block">
                <div class="issue-header">
                    <span class="issue-icon">üî¥</span>
                    <span class="issue-number">ISSUE #{self.issue_counter}</span>
                </div>
                <div class="issue-content">{issue_content}</div>
            </div>
            """
        
        def format_solution(match) -> str:
            self.solution_counter += 1
            solution_content = match.group(1).strip()
            return f"""
            <div class="solution-block">
                <div class="solution-header">
                    <span class="solution-icon">üîß</span>
                    <span class="solution-number">SOLUTION #{self.solution_counter}</span>
                </div>
                <div class="solution-content">{solution_content}</div>
            </div>
            """
        
        text = re.sub(issue_pattern, format_issue, text, flags=re.DOTALL)
        text = re.sub(solution_pattern, format_solution, text, flags=re.DOTALL)
        
        return text

    def _format_code_blocks(self, text: str) -> str:
        """Format code blocks with copy functionality"""
        def create_code_block(match):
            language = match.group(1) if match.group(1) else 'text'
            code_content = match.group(2).strip()
            block_id = str(uuid.uuid4())
            
            return f"""
            <div class="code-block-container">
                <div class="code-header">
                    <span class="code-language">{language}</span>
                    <button class="copy-btn" onclick="copyCode('{block_id}')">
                        <span class="copy-icon">üìã</span>
                        <span class="copy-text">Copy</span>
                    </button>
                </div>
                <div class="code-content">
                    <pre id="{block_id}"><code class="language-{language}">{code_content}</code></pre>
                </div>
            </div>
            """
        
        # Handle code blocks with language specification
        text = re.sub(r'```(\w+)?\n?(.*?)\n?```', create_code_block, text, flags=re.DOTALL)
        
        # Handle inline code
        text = re.sub(r'`([^`]+)`', r'<code class="inline-code">\1</code>', text)
        
        return text

    def _enhance_typography(self, text: str) -> str:
        """Enhance typography with HTML formatting"""
        # Format quality scores
        text = re.sub(r'Quality Score:\s*(\d+)/10', 
                      r'<div class="quality-score">Quality Score: <span class="score">\1/10</span></div>', text)
        
        # Format severity levels
        severity_replacements = {
            'CRITICAL': '<span class="severity critical">üö® CRITICAL üö®</span>',
            'HIGH PRIORITY': '<span class="severity high">üö® HIGH PRIORITY üö®</span>', 
            'MEDIUM PRIORITY': '<span class="severity medium">‚ö†Ô∏è MEDIUM PRIORITY ‚ö†Ô∏è</span>',
            'LOW PRIORITY': '<span class="severity low">üìù LOW PRIORITY üìù</span>'
        }
        
        for level, replacement in severity_replacements.items():
            text = re.sub(f'\\b{level}\\b', replacement, text, flags=re.IGNORECASE)
        
        # Format checklists
        text = re.sub(r'‚ñ°\s*([^\n]+)', r'<div class="checklist-item"><input type="checkbox" disabled> \1</div>', text)
        
        # Format numbered lists
        text = re.sub(r'^\s*(\d+)\.\s*([^\n]+)', 
                      r'<div class="numbered-item"><span class="number">\1.</span> \2</div>', text, flags=re.MULTILINE)
        
        return text

    def _get_css_styles(self) -> str:
        """Get CSS styles for the AI analysis report"""
        return """
        .ai-analysis-report {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #2c3e50;
            max-width: 100%;
            margin: 0 auto;
            background: #ffffff;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .ai-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }
        
        .ai-title {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin-bottom: 10px;
        }
        
        .ai-icon {
            font-size: 2em;
        }
        
        .ai-title h1 {
            margin: 0;
            font-size: 1.5em;
            font-weight: 600;
        }
        
        .ai-meta {
            font-size: 0.9em;
            opacity: 0.9;
        }
        
        .separator {
            margin: 0 8px;
        }
        
        .divider {
            height: 2px;
            background: linear-gradient(90deg, #667eea, #764ba2);
            margin: 0;
        }
        
        .section-header {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 15px 20px;
            margin: 20px 0 10px 0;
            border-radius: 8px;
            font-weight: 600;
        }
        
        .section-header.assessment {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
        }
        
        .section-header.positive {
            background: linear-gradient(135deg, #2ecc71, #27ae60);
            color: white;
        }
        
        .section-header.critical {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
        }
        
        .section-header.warning {
            background: linear-gradient(135deg, #f39c12, #e67e22);
            color: white;
        }
        
        .section-header.suggestion {
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
            color: white;
        }
        
        .section-header.guide {
            background: linear-gradient(135deg, #1abc9c, #16a085);
            color: white;
        }
        
        .section-header.checklist, .section-header.resources {
            background: linear-gradient(135deg, #34495e, #2c3e50);
            color: white;
        }
        
        .section-emoji {
            font-size: 1.2em;
        }
        
        .section-title {
            margin: 0;
            font-size: 1.1em;
        }
        
        .section-content {
            padding: 0 20px 20px 20px;
        }
        
        .issue-block, .solution-block {
            margin: 15px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .issue-header {
            background: #fee;
            color: #c0392b;
            padding: 10px 15px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .solution-header {
            background: #eff;
            color: #27ae60;
            padding: 10px 15px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .issue-content, .solution-content {
            padding: 15px;
            background: white;
            border-left: 4px solid #e74c3c;
        }
        
        .solution-content {
            border-left-color: #27ae60;
        }
        
        .code-block-container {
            margin: 15px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border: 1px solid #e1e8ed;
        }
        
        .code-header {
            background: #f8f9fa;
            padding: 10px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e1e8ed;
        }
        
        .code-language {
            font-size: 0.85em;
            font-weight: 500;
            color: #657786;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .copy-btn {
            display: flex;
            align-items: center;
            gap: 5px;
            background: #1da1f2;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 6px 12px;
            cursor: pointer;
            font-size: 0.85em;
            transition: background-color 0.2s;
        }
        
        .copy-btn:hover {
            background: #1991da;
        }
        
        .copy-btn.copied {
            background: #17bf63;
        }
        
        .code-content {
            background: #f6f8fa;
            overflow-x: auto;
        }
        
        .code-content pre {
            margin: 0;
            padding: 15px;
            background: transparent;
            border: none;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 0.9em;
            line-height: 1.5;
        }
        
        .code-content code {
            background: transparent;
            padding: 0;
            border-radius: 0;
            font-size: inherit;
        }
        
        .inline-code {
            background: #f1f3f4;
            color: #c7254e;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 0.9em;
        }
        
        .quality-score {
            background: #e8f5e8;
            border: 1px solid #4caf50;
            border-radius: 6px;
            padding: 10px 15px;
            margin: 10px 0;
            font-weight: 500;
        }
        
        .quality-score .score {
            color: #4caf50;
            font-weight: 600;
            font-size: 1.1em;
        }
        
        .severity {
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 0.85em;
            text-transform: uppercase;
        }
        
        .severity.critical {
            background: #ffebee;
            color: #c62828;
            border: 1px solid #e57373;
        }
        
        .severity.high {
            background: #fff3e0;
            color: #ef6c00;
            border: 1px solid #ffb74d;
        }
        
        .severity.medium {
            background: #fff8e1;
            color: #f57f17;
            border: 1px solid #ffcc02;
        }
        
        .severity.low {
            background: #f3e5f5;
            color: #7b1fa2;
            border: 1px solid #ce93d8;
        }
        
        .checklist-item {
            display: flex;
            align-items: center;
            gap: 8px;
            margin: 8px 0;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 4px;
        }
        
        .numbered-item {
            display: flex;
            align-items: flex-start;
            gap: 10px;
            margin: 10px 0;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
            border-left: 4px solid #1da1f2;
        }
        
        .numbered-item .number {
            background: #1da1f2;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 0.9em;
            min-width: 24px;
            text-align: center;
        }
        
        .ai-disclaimer {
            background: #fff8dc;
            border: 1px solid #ffc107;
            border-radius: 8px;
            padding: 20px;
            margin: 20px;
        }
        
        .disclaimer-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
            font-weight: 600;
            color: #856404;
        }
        
        .warning-icon {
            font-size: 1.2em;
        }
        
        .disclaimer-content {
            color: #856404;
        }
        
        .disclaimer-content ul {
            margin: 10px 0;
            padding-left: 20px;
        }
        
        .disclaimer-content li {
            margin: 5px 0;
        }
        """

    def _get_copy_script(self) -> str:
        """Get JavaScript for copy functionality"""
        return """
        function copyCode(elementId) {
            const element = document.getElementById(elementId);
            const text = element.textContent || element.innerText;
            
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(text).then(function() {
                    showCopySuccess(elementId);
                }).catch(function() {
                    fallbackCopyTextToClipboard(text, elementId);
                });
            } else {
                fallbackCopyTextToClipboard(text, elementId);
            }
        }
        
        function fallbackCopyTextToClipboard(text, elementId) {
            const textArea = document.createElement("textarea");
            textArea.value = text;
            textArea.style.top = "0";
            textArea.style.left = "0";
            textArea.style.position = "fixed";
            
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
                document.execCommand('copy');
                showCopySuccess(elementId);
            } catch (err) {
                console.error('Fallback: Oops, unable to copy', err);
            }
            
            document.body.removeChild(textArea);
        }
        
        function showCopySuccess(elementId) {
            const codeBlock = document.getElementById(elementId).closest('.code-block-container');
            const copyBtn = codeBlock.querySelector('.copy-btn');
            const copyText = copyBtn.querySelector('.copy-text');
            const copyIcon = copyBtn.querySelector('.copy-icon');
            
            // Store original values
            const originalText = copyText.textContent;
            const originalIcon = copyIcon.textContent;
            
            // Update button to show success
            copyText.textContent = 'Copied!';
            copyIcon.textContent = '‚úÖ';
            copyBtn.classList.add('copied');
            
            // Reset after 2 seconds
            setTimeout(() => {
                copyText.textContent = originalText;
                copyIcon.textContent = originalIcon;
                copyBtn.classList.remove('copied');
            }, 2000);
        }
        """


# Service class remains the same but now returns HTML
class AIResponseService:
    """Service class to handle AI response processing and analysis"""
    
    def __init__(self):
        self.formatter = AICommentFormatter()
    
    def process_response(self, ai_text: str, post) -> Tuple[str, Dict]:
        """Process AI response with HTML formatting and analysis"""
        formatted_response = self.formatter.format_full_response(ai_text, post)
        summary = self.extract_summary(ai_text)
        return formatted_response, summary
    
    def extract_summary(self, ai_text: str) -> Dict:
        """Extract comprehensive summary with metrics"""
        critical_issues = len(re.findall(r'üö®|CRITICAL|HIGH PRIORITY|üî¥\s*PROBLEM', ai_text, re.IGNORECASE))
        improvements = len(re.findall(r'‚ö†Ô∏è|IMPROVEMENT|MEDIUM PRIORITY', ai_text, re.IGNORECASE))
        suggestions = len(re.findall(r'üí°|SUGGESTION|LOW PRIORITY', ai_text, re.IGNORECASE))
        
        quality_score = self._extract_quality_score(ai_text)
        severity_level = 'HIGH' if critical_issues > 0 else ('MEDIUM' if improvements > 0 else 'LOW')
        
        return {
            'quality_score': quality_score,
            'severity_level': severity_level,
            'critical_issues_count': critical_issues,
            'improvement_suggestions_count': improvements,
            'enhancement_suggestions_count': suggestions,
            'code_fixes_count': len(re.findall(r'üîß|SOLUTION|FIX', ai_text, re.IGNORECASE)),
            'has_critical_issues': critical_issues > 0,
            'has_suggestions': (improvements + suggestions) > 0,
            'sections_found': len(re.findall(r'[üéØ‚úÖüö®‚ö†Ô∏èüí°üîßüìãüìö]', ai_text)),
            'priority_actions': self._extract_priority_actions(ai_text)
        }
    
    def _extract_quality_score(self, ai_text: str) -> Optional[int]:
        """Extract quality score from AI response"""
        match = re.search(r'Quality Score:\s*(\d+)/10', ai_text, re.IGNORECASE)
        if match:
            try:
                return int(match.group(1))
            except ValueError:
                return None 
        return None
    
    def _extract_priority_actions(self, ai_text: str) -> List[str]:
        """Extract top priority actions"""
        actions = []
        lines = ai_text.split('\n')
        
        for line in lines:
            if re.match(r'^\s*\d+\.', line):
                actions.append(line.strip())
                if len(actions) >= 5:
                    break
        
        return actions


# Enhanced prompt builder remains the same
def build_enhanced_prompt(content: str, language: Optional[str] = None, 
                          framework: Optional[str] = None, focus_areas: Optional[List[str]] = None) -> str:
    """Build enhanced prompt with better structure for numbered issues"""
    context_parts = []
    if language:
        context_parts.append(f"Programming Language: {language}")
    if framework:
        context_parts.append(f"Framework/Library: {framework}")

    context = "\n".join(context_parts) + "\n" if context_parts else ""
    focus_instruction = f"\nPay special attention to: {', '.join(focus_areas)}\n" if focus_areas else ""

    return f"""You are a senior software engineer conducting a thorough code review. Analyze this code and provide actionable feedback with NUMBERED issues and corresponding solutions.

{context}CODE TO REVIEW:
```{content}```
{focus_instruction}

CRITICAL FORMATTING REQUIREMENTS:
- Number all issues as ISSUE 1, ISSUE 2, etc.
- Number all solutions as SOLUTION 1, SOLUTION 2, etc. 
- Each SOLUTION should correspond to the same numbered ISSUE
- Use clear PROBLEM: and SOLUTION: labels
- Include specific code examples for each issue

Structure your response exactly as follows:

üéØ OVERALL ASSESSMENT
Quality Score: X/10
Complexity Level: [Low/Medium/High]
Risk Level: [Low/Medium/High/Critical]

‚úÖ WHAT'S WORKING WELL
[List specific strengths]

üö® CRITICAL ISSUES (HIGH PRIORITY)
PROBLEM: Issue 1 description with code example
IMPACT: What could go wrong
SOLUTION: Specific fix with code example

PROBLEM: Issue 2 description with code example  
IMPACT: What could go wrong
SOLUTION: Specific fix with code example

‚ö†Ô∏è IMPORTANT IMPROVEMENTS (MEDIUM PRIORITY)
PROBLEM: Issue 3 description
CURRENT CODE: Show problematic code
SOLUTION: Show improved code
BENEFIT: Why this helps

üîß STEP-BY-STEP FIX GUIDE
1. Fix Issue 1: [specific steps]
2. Fix Issue 2: [specific steps] 
3. Implement Improvement 3: [specific steps]

üìã QUICK CHECKLIST
‚ñ° Fix critical security issues
‚ñ° Handle error cases
‚ñ° Improve performance
‚ñ° Add input validation

Make sure to number every issue and provide corresponding numbered solutions."""